{{- range $cfg := .Values.nodes }}
apiVersion: apps/v1
{{ if $.Values.db.stateful }}
kind: StatefulSet
{{ else }}
kind: Deployment
{{ end }}
metadata:
  name: {{ $.Release.Name }}-{{ $cfg.name }}
spec:
  selector:
    matchLabels:
      app: {{ $.Release.Name }}
      instance: {{ $cfg.name }}
      release: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}
        instance: {{ $cfg.name }}
        release: {{ $.Release.Name }}
        {{- range $key, $value := $.Values.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      annotations:
        prometheus.io/scrape: 'true'
    spec:
      volumes:
        - name: {{ $.Release.Name }}-{{ $cfg.name }}-config-map
          configMap:
            name: {{ $.Release.Name }}-{{ $cfg.name }}-cm
      initContainers:
        - name: db-wait
          image: busybox:1.34.0
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - "-c"
            -  |-
              CNT=0;
              while [ $CNT -le 90 ]
              do
                if nc -z -v -w5 $POSTGRES_HOST $POSTGRES_PORT; then
                  echo "Postgres is up!";
                  exit 0;
                fi;
                echo "Waiting for Postgres to come up...";
                sleep 2;
                CNT=$((CNT+1));
              done;
              echo "WARNING. Postgres is not up, exiting";
              exit 1;
          env:
            - name: POSTGRES_HOST
              value: {{ $.Release.Name }}-postgres-{{ $cfg.name }}-service.{{ $.Release.Namespace }}.svc.cluster.local
            - name: POSTGRES_PORT
              value: "5432"
      containers:
        - name: node
          image: {{ $.Values.chainlink.image.image }}:{{ $.Values.chainlink.image.version }}
          imagePullPolicy: IfNotPresent
          command: ["bash", "-c", "chainlink -c /etc/node-secrets-volume/default.toml -c /etc/node-secrets-volume/overrides.toml -secrets /etc/node-secrets-volume/secrets.toml node start -d -p /etc/node-secrets-volume/node-password -a /etc/node-secrets-volume/apicredentials --vrfpassword=/etc/node-secrets-volume/apicredentials"]
          ports:
            - name: access
              containerPort: {{ $.Values.chainlink.web_port }}
            - name: p2p
              containerPort: {{ $.Values.chainlink.p2p_port }}
          env:
            - name: CL_DATABASE_URL
              value: postgresql://{{ $.Values.db.postgresUser }}:{{ $.Values.db.postgresPassword }}@{{ $.Release.Name }}-postgres-{{ $cfg.name }}-service.{{ $.Release.Namespace }}.svc.cluster.local:5432/{{ $.Values.db.postgresDatabase }}?sslmode=disable
          {{- range $key, $value := $.Values.env }}
            {{- if $value }}
            - name: {{ $key | upper}}
              {{- if kindIs "string" $value}}
              value: {{ $value | quote}}
              {{- else }}
              value: {{ $value }}
              {{- end }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: {{ $.Release.Name }}-{{ $cfg.name }}-config-map
              mountPath: /etc/node-secrets-volume/
          livenessProbe:
            httpGet:
              path: /health
              port: {{ $.Values.chainlink.web_port }}
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: {{ $.Values.chainlink.web_port }}
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: {{ $.Values.chainlink.web_port }}
            initialDelaySeconds: 15
            periodSeconds: 5
            failureThreshold: 20
          resources:
            requests:
              memory: {{ $.Values.chainlink.resources.requests.memory }}
              cpu: {{ $.Values.chainlink.resources.requests.cpu }}
            limits:
              memory: {{ $.Values.chainlink.resources.limits.memory }}
              cpu: {{ $.Values.chainlink.resources.limits.cpu }}
              {{- with $.Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with $.Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with $.Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
---
{{- end }}